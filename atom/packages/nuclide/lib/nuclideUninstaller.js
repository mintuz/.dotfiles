

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var os = require('os');

// Mutliline commands are split with the caret character ('^') on Windows and with a slash ('\') on
// *nix.
var MULTILINE_CHAR = os.platform() === 'win32' ? '^' : '\\';

// Non-published Facebook packages begin with 'fb-'.
var PACKAGE_PREFIX_REGEXP = /^fb-/;
var OUTDATED_PACKAGE_NAMES = new Set(['hyperclick', 'nuclide-arcanist', 'nuclide-blame', 'nuclide-blame-provider-hg', 'nuclide-blame-ui', 'nuclide-buck-files', 'nuclide-busy-signal', 'nuclide-clang-atom', 'nuclide-clipboard-path', 'nuclide-code-format', 'nuclide-code-highlight', 'nuclide-debugger-atom', 'nuclide-debugger-hhvm', 'nuclide-debugger-lldb', 'nuclide-diagnostics-store', 'nuclide-diagnostics-ui', 'nuclide-diff-view', 'nuclide-file-tree', 'nuclide-file-watcher', 'nuclide-find-references', 'nuclide-flow', 'nuclide-format-js', 'nuclide-fuzzy-filename-provider', 'nuclide-hack', 'nuclide-hack-symbol-provider', 'nuclide-health', 'nuclide-hg-repository', 'nuclide-home', 'nuclide-installer', 'nuclide-language-hack', 'nuclide-move-pane', 'nuclide-objc', 'nuclide-ocaml', 'nuclide-open-filenames-provider', 'nuclide-quick-open', 'nuclide-react-native-inspector', 'nuclide-recent-files-provider', 'nuclide-recent-files-service', 'nuclide-remote-projects', 'nuclide-service-monitor', 'nuclide-test-runner', 'nuclide-toolbar', 'nuclide-type-hint', 'nuclide-url-hyperclick']);

function isOutdatedPackageName(packageName) {
  return OUTDATED_PACKAGE_NAMES.has(packageName) || PACKAGE_PREFIX_REGEXP.test(packageName);
}

function getOutdatedAvailablePackageNames() {
  return atom.packages.getAvailablePackageNames().filter(isOutdatedPackageName);
}

function disableOutdatedPackages() {
  var outdatedAvailablePackages = getOutdatedAvailablePackageNames();
  if (outdatedAvailablePackages.length > 0) {
    (function () {
      outdatedAvailablePackages.forEach(function (name) {
        // Disabling a package while it's already disabled adds a duplicate entry to the
        // `disabledPackages` setting. Ensure it's not added multiple times.
        if (!atom.packages.isPackageDisabled(name)) {
          atom.packages.disablePackage(name);
        }
      });

      var uninstallCommand = 'apm uninstall ' + MULTILINE_CHAR + '\n' + outdatedAvailablePackages.join(' ' + MULTILINE_CHAR + '\n');
      atom.notifications.addWarning('Found Outdated Nuclide Packages', {
        buttons: [{
          className: 'icon icon-clippy',
          onDidClick: function onDidClick() {
            atom.clipboard.write(uninstallCommand);
          },
          text: 'Copy Uninstall Command'
        }],
        description: 'Outdated Nuclide packages have been disabled, and it is recommended you' + ' uninstall them before using Atom+Nuclide. To uninstall them, run the following command' + (' from the command line and then restart Atom: <pre>' + uninstallCommand + '</pre>'),
        dismissable: true
      });
    })();
  }
}

module.exports = {
  disableOutdatedPackages: disableOutdatedPackages
};
//# sourceMappingURL=data:application/json;base64,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QkFBdUI7Q0FDeEIsQ0FBQyIsImZpbGUiOiJudWNsaWRlVW5pbnN0YWxsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5cbi8vIE11dGxpbGluZSBjb21tYW5kcyBhcmUgc3BsaXQgd2l0aCB0aGUgY2FyZXQgY2hhcmFjdGVyICgnXicpIG9uIFdpbmRvd3MgYW5kIHdpdGggYSBzbGFzaCAoJ1xcJykgb25cbi8vICpuaXguXG5jb25zdCBNVUxUSUxJTkVfQ0hBUiA9IChvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInKSA/ICdeJyA6ICdcXFxcJztcblxuLy8gTm9uLXB1Ymxpc2hlZCBGYWNlYm9vayBwYWNrYWdlcyBiZWdpbiB3aXRoICdmYi0nLlxuY29uc3QgUEFDS0FHRV9QUkVGSVhfUkVHRVhQID0gL15mYi0vO1xuY29uc3QgT1VUREFURURfUEFDS0FHRV9OQU1FUyA9IG5ldyBTZXQoW1xuICAnaHlwZXJjbGljaycsXG4gICdudWNsaWRlLWFyY2FuaXN0JyxcbiAgJ251Y2xpZGUtYmxhbWUnLFxuICAnbnVjbGlkZS1ibGFtZS1wcm92aWRlci1oZycsXG4gICdudWNsaWRlLWJsYW1lLXVpJyxcbiAgJ251Y2xpZGUtYnVjay1maWxlcycsXG4gICdudWNsaWRlLWJ1c3ktc2lnbmFsJyxcbiAgJ251Y2xpZGUtY2xhbmctYXRvbScsXG4gICdudWNsaWRlLWNsaXBib2FyZC1wYXRoJyxcbiAgJ251Y2xpZGUtY29kZS1mb3JtYXQnLFxuICAnbnVjbGlkZS1jb2RlLWhpZ2hsaWdodCcsXG4gICdudWNsaWRlLWRlYnVnZ2VyLWF0b20nLFxuICAnbnVjbGlkZS1kZWJ1Z2dlci1oaHZtJyxcbiAgJ251Y2xpZGUtZGVidWdnZXItbGxkYicsXG4gICdudWNsaWRlLWRpYWdub3N0aWNzLXN0b3JlJyxcbiAgJ251Y2xpZGUtZGlhZ25vc3RpY3MtdWknLFxuICAnbnVjbGlkZS1kaWZmLXZpZXcnLFxuICAnbnVjbGlkZS1maWxlLXRyZWUnLFxuICAnbnVjbGlkZS1maWxlLXdhdGNoZXInLFxuICAnbnVjbGlkZS1maW5kLXJlZmVyZW5jZXMnLFxuICAnbnVjbGlkZS1mbG93JyxcbiAgJ251Y2xpZGUtZm9ybWF0LWpzJyxcbiAgJ251Y2xpZGUtZnV6enktZmlsZW5hbWUtcHJvdmlkZXInLFxuICAnbnVjbGlkZS1oYWNrJyxcbiAgJ251Y2xpZGUtaGFjay1zeW1ib2wtcHJvdmlkZXInLFxuICAnbnVjbGlkZS1oZWFsdGgnLFxuICAnbnVjbGlkZS1oZy1yZXBvc2l0b3J5JyxcbiAgJ251Y2xpZGUtaG9tZScsXG4gICdudWNsaWRlLWluc3RhbGxlcicsXG4gICdudWNsaWRlLWxhbmd1YWdlLWhhY2snLFxuICAnbnVjbGlkZS1tb3ZlLXBhbmUnLFxuICAnbnVjbGlkZS1vYmpjJyxcbiAgJ251Y2xpZGUtb2NhbWwnLFxuICAnbnVjbGlkZS1vcGVuLWZpbGVuYW1lcy1wcm92aWRlcicsXG4gICdudWNsaWRlLXF1aWNrLW9wZW4nLFxuICAnbnVjbGlkZS1yZWFjdC1uYXRpdmUtaW5zcGVjdG9yJyxcbiAgJ251Y2xpZGUtcmVjZW50LWZpbGVzLXByb3ZpZGVyJyxcbiAgJ251Y2xpZGUtcmVjZW50LWZpbGVzLXNlcnZpY2UnLFxuICAnbnVjbGlkZS1yZW1vdGUtcHJvamVjdHMnLFxuICAnbnVjbGlkZS1zZXJ2aWNlLW1vbml0b3InLFxuICAnbnVjbGlkZS10ZXN0LXJ1bm5lcicsXG4gICdudWNsaWRlLXRvb2xiYXInLFxuICAnbnVjbGlkZS10eXBlLWhpbnQnLFxuICAnbnVjbGlkZS11cmwtaHlwZXJjbGljaycsXG5dKTtcblxuZnVuY3Rpb24gaXNPdXRkYXRlZFBhY2thZ2VOYW1lKHBhY2thZ2VOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIE9VVERBVEVEX1BBQ0tBR0VfTkFNRVMuaGFzKHBhY2thZ2VOYW1lKSB8fCBQQUNLQUdFX1BSRUZJWF9SRUdFWFAudGVzdChwYWNrYWdlTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldE91dGRhdGVkQXZhaWxhYmxlUGFja2FnZU5hbWVzKCk6IEFycmF5PHN0cmluZz4ge1xuICByZXR1cm4gYXRvbS5wYWNrYWdlcy5nZXRBdmFpbGFibGVQYWNrYWdlTmFtZXMoKS5maWx0ZXIoaXNPdXRkYXRlZFBhY2thZ2VOYW1lKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZU91dGRhdGVkUGFja2FnZXMoKTogdm9pZCB7XG4gIGNvbnN0IG91dGRhdGVkQXZhaWxhYmxlUGFja2FnZXMgPSBnZXRPdXRkYXRlZEF2YWlsYWJsZVBhY2thZ2VOYW1lcygpO1xuICBpZiAob3V0ZGF0ZWRBdmFpbGFibGVQYWNrYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgb3V0ZGF0ZWRBdmFpbGFibGVQYWNrYWdlcy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgLy8gRGlzYWJsaW5nIGEgcGFja2FnZSB3aGlsZSBpdCdzIGFscmVhZHkgZGlzYWJsZWQgYWRkcyBhIGR1cGxpY2F0ZSBlbnRyeSB0byB0aGVcbiAgICAgIC8vIGBkaXNhYmxlZFBhY2thZ2VzYCBzZXR0aW5nLiBFbnN1cmUgaXQncyBub3QgYWRkZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgICBpZiAoIWF0b20ucGFja2FnZXMuaXNQYWNrYWdlRGlzYWJsZWQobmFtZSkpIHtcbiAgICAgICAgYXRvbS5wYWNrYWdlcy5kaXNhYmxlUGFja2FnZShuYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHVuaW5zdGFsbENvbW1hbmQgPVxuICAgICAgYGFwbSB1bmluc3RhbGwgJHtNVUxUSUxJTkVfQ0hBUn1cXG4ke291dGRhdGVkQXZhaWxhYmxlUGFja2FnZXMuam9pbihgICR7TVVMVElMSU5FX0NIQVJ9XFxuYCl9YDtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZygnRm91bmQgT3V0ZGF0ZWQgTnVjbGlkZSBQYWNrYWdlcycsIHtcbiAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2ljb24gaWNvbi1jbGlwcHknLFxuICAgICAgICAgIG9uRGlkQ2xpY2soKSB7IGF0b20uY2xpcGJvYXJkLndyaXRlKHVuaW5zdGFsbENvbW1hbmQpOyB9LFxuICAgICAgICAgIHRleHQ6ICdDb3B5IFVuaW5zdGFsbCBDb21tYW5kJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBkZXNjcmlwdGlvbjogJ091dGRhdGVkIE51Y2xpZGUgcGFja2FnZXMgaGF2ZSBiZWVuIGRpc2FibGVkLCBhbmQgaXQgaXMgcmVjb21tZW5kZWQgeW91J1xuICAgICAgICArICcgdW5pbnN0YWxsIHRoZW0gYmVmb3JlIHVzaW5nIEF0b20rTnVjbGlkZS4gVG8gdW5pbnN0YWxsIHRoZW0sIHJ1biB0aGUgZm9sbG93aW5nIGNvbW1hbmQnXG4gICAgICAgICsgYCBmcm9tIHRoZSBjb21tYW5kIGxpbmUgYW5kIHRoZW4gcmVzdGFydCBBdG9tOiA8cHJlPiR7dW5pbnN0YWxsQ29tbWFuZH08L3ByZT5gLFxuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRpc2FibGVPdXRkYXRlZFBhY2thZ2VzLFxufTtcbiJdfQ==