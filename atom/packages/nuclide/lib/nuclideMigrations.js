

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var PACKAGE_PREFIX_REGEXP = /^(nuclide|fb)-/;

function migrateConfig() {
  var allUserConfigs = atom.config.getRawValue(null, {
    sources: atom.config.getUserConfigPath()
  });

  // Migrate only if user config exists and is a non-null Object. Anything else is outside what the
  // migration is able to handle.
  if (typeof allUserConfigs !== 'object' || allUserConfigs == null) {
    return;
  }

  // Having performed migrations is a proxy for deciding whether this is the first time these
  // migrations have been run. If any settings matching `PACKAGE_PREFIX_REGEXP` are found, this is
  // likely the first time the 'nuclide' package has been activated.
  var didMigrate = false;
  Object.keys(allUserConfigs).forEach(function (k) {
    if (PACKAGE_PREFIX_REGEXP.test(k)) {
      var newConfig = atom.config.get('nuclide');

      if (typeof newConfig !== 'object' || newConfig == null) {
        // If no 'nuclide' config has been set yet, initialize it with an empty object so it can
        // be populated with the old settings.
        newConfig = {};
      }

      newConfig[k] = allUserConfigs[k];
      atom.config.setRawValue('nuclide', newConfig);

      // Remove old setting so it is not migrated again.
      atom.config.unset(k);

      // Track that a setting in need of migration was found.
      didMigrate = true;
    }
  });

  // Remove obsolete remote-projects setting
  atom.config.unset('nuclide.remoteProjectsConfig');
  atom.config.unset('nuclide.nuclide-diagnostics-ui.enableAutofix');
  atom.config.unset('nuclide.nuclide-health.showActiveHandles');
  atom.config.unset('nuclide.nuclide-health.showActiveRequests');
  atom.config.unset('nuclide.nuclide-health.showCpu');
  atom.config.unset('nuclide.nuclide-health.showHeap');
  atom.config.unset('nuclide.nuclide-health.showKeyLatency');
  atom.config.unset('nuclide.nuclide-health.showMemory');

  // If any migrations were performed, forcibly enable the 'incompatible-packages' package because
  // it may have been disabled programmatically via internal means. Only do this while migrating so
  // users can re-disable the package normally after an initial migration.
  if (didMigrate) {
    var disabledPackages = atom.config.get('core.disabledPackages');
    if (Array.isArray(disabledPackages)) {
      var incompatPkgsIndex = disabledPackages.indexOf('incompatible-packages');
      if (incompatPkgsIndex >= 0) {
        disabledPackages.splice(incompatPkgsIndex, 1);
        atom.config.setRawValue('core.disabledPackages', disabledPackages);
      }
    }
  }
}

module.exports = {
  migrateConfig: migrateConfig
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm51Y2xpZGVNaWdyYXRpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFXQSxJQUFNLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDOztBQUUvQyxTQUFTLGFBQWEsR0FBUztBQUM3QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDbkQsV0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUU7R0FDekMsQ0FBQyxDQUFDOzs7O0FBSUgsTUFBSSxPQUFPLGNBQWMsS0FBSyxRQUFRLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtBQUNoRSxXQUFPO0dBQ1I7Ozs7O0FBS0QsTUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFFO0FBQzlDLFFBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ2pDLFVBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUUzQyxVQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFOzs7QUFHdEQsaUJBQVMsR0FBRyxFQUFFLENBQUM7T0FDaEI7O0FBRUQsZUFBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxVQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7OztBQUc5QyxVQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBR3JCLGdCQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO0dBQ0YsQ0FBQyxDQUFDOzs7QUFHSCxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ2xELE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7QUFDbEUsTUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUM5RCxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQy9ELE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDcEQsTUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNyRCxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQzNELE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Ozs7O0FBS3ZELE1BQUksVUFBVSxFQUFFO0FBQ2QsUUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2xFLFFBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO0FBQ25DLFVBQU0saUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDNUUsVUFBSSxpQkFBaUIsSUFBSSxDQUFDLEVBQUU7QUFDMUIsd0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLFlBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLGdCQUFnQixDQUFDLENBQUM7T0FDcEU7S0FDRjtHQUNGO0NBQ0Y7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGVBQWEsRUFBYixhQUFhO0NBQ2QsQ0FBQyIsImZpbGUiOiJudWNsaWRlTWlncmF0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IFBBQ0tBR0VfUFJFRklYX1JFR0VYUCA9IC9eKG51Y2xpZGV8ZmIpLS87XG5cbmZ1bmN0aW9uIG1pZ3JhdGVDb25maWcoKTogdm9pZCB7XG4gIGNvbnN0IGFsbFVzZXJDb25maWdzID0gYXRvbS5jb25maWcuZ2V0UmF3VmFsdWUobnVsbCwge1xuICAgIHNvdXJjZXM6IGF0b20uY29uZmlnLmdldFVzZXJDb25maWdQYXRoKCksXG4gIH0pO1xuXG4gIC8vIE1pZ3JhdGUgb25seSBpZiB1c2VyIGNvbmZpZyBleGlzdHMgYW5kIGlzIGEgbm9uLW51bGwgT2JqZWN0LiBBbnl0aGluZyBlbHNlIGlzIG91dHNpZGUgd2hhdCB0aGVcbiAgLy8gbWlncmF0aW9uIGlzIGFibGUgdG8gaGFuZGxlLlxuICBpZiAodHlwZW9mIGFsbFVzZXJDb25maWdzICE9PSAnb2JqZWN0JyB8fCBhbGxVc2VyQ29uZmlncyA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSGF2aW5nIHBlcmZvcm1lZCBtaWdyYXRpb25zIGlzIGEgcHJveHkgZm9yIGRlY2lkaW5nIHdoZXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGVzZVxuICAvLyBtaWdyYXRpb25zIGhhdmUgYmVlbiBydW4uIElmIGFueSBzZXR0aW5ncyBtYXRjaGluZyBgUEFDS0FHRV9QUkVGSVhfUkVHRVhQYCBhcmUgZm91bmQsIHRoaXMgaXNcbiAgLy8gbGlrZWx5IHRoZSBmaXJzdCB0aW1lIHRoZSAnbnVjbGlkZScgcGFja2FnZSBoYXMgYmVlbiBhY3RpdmF0ZWQuXG4gIGxldCBkaWRNaWdyYXRlID0gZmFsc2U7XG4gIE9iamVjdC5rZXlzKGFsbFVzZXJDb25maWdzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICBpZiAoUEFDS0FHRV9QUkVGSVhfUkVHRVhQLnRlc3QoaykpIHtcbiAgICAgIGxldCBuZXdDb25maWcgPSBhdG9tLmNvbmZpZy5nZXQoJ251Y2xpZGUnKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXdDb25maWcgIT09ICdvYmplY3QnIHx8IG5ld0NvbmZpZyA9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIG5vICdudWNsaWRlJyBjb25maWcgaGFzIGJlZW4gc2V0IHlldCwgaW5pdGlhbGl6ZSBpdCB3aXRoIGFuIGVtcHR5IG9iamVjdCBzbyBpdCBjYW5cbiAgICAgICAgLy8gYmUgcG9wdWxhdGVkIHdpdGggdGhlIG9sZCBzZXR0aW5ncy5cbiAgICAgICAgbmV3Q29uZmlnID0ge307XG4gICAgICB9XG5cbiAgICAgIG5ld0NvbmZpZ1trXSA9IGFsbFVzZXJDb25maWdzW2tdO1xuICAgICAgYXRvbS5jb25maWcuc2V0UmF3VmFsdWUoJ251Y2xpZGUnLCBuZXdDb25maWcpO1xuXG4gICAgICAvLyBSZW1vdmUgb2xkIHNldHRpbmcgc28gaXQgaXMgbm90IG1pZ3JhdGVkIGFnYWluLlxuICAgICAgYXRvbS5jb25maWcudW5zZXQoayk7XG5cbiAgICAgIC8vIFRyYWNrIHRoYXQgYSBzZXR0aW5nIGluIG5lZWQgb2YgbWlncmF0aW9uIHdhcyBmb3VuZC5cbiAgICAgIGRpZE1pZ3JhdGUgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gUmVtb3ZlIG9ic29sZXRlIHJlbW90ZS1wcm9qZWN0cyBzZXR0aW5nXG4gIGF0b20uY29uZmlnLnVuc2V0KCdudWNsaWRlLnJlbW90ZVByb2plY3RzQ29uZmlnJyk7XG4gIGF0b20uY29uZmlnLnVuc2V0KCdudWNsaWRlLm51Y2xpZGUtZGlhZ25vc3RpY3MtdWkuZW5hYmxlQXV0b2ZpeCcpO1xuICBhdG9tLmNvbmZpZy51bnNldCgnbnVjbGlkZS5udWNsaWRlLWhlYWx0aC5zaG93QWN0aXZlSGFuZGxlcycpO1xuICBhdG9tLmNvbmZpZy51bnNldCgnbnVjbGlkZS5udWNsaWRlLWhlYWx0aC5zaG93QWN0aXZlUmVxdWVzdHMnKTtcbiAgYXRvbS5jb25maWcudW5zZXQoJ251Y2xpZGUubnVjbGlkZS1oZWFsdGguc2hvd0NwdScpO1xuICBhdG9tLmNvbmZpZy51bnNldCgnbnVjbGlkZS5udWNsaWRlLWhlYWx0aC5zaG93SGVhcCcpO1xuICBhdG9tLmNvbmZpZy51bnNldCgnbnVjbGlkZS5udWNsaWRlLWhlYWx0aC5zaG93S2V5TGF0ZW5jeScpO1xuICBhdG9tLmNvbmZpZy51bnNldCgnbnVjbGlkZS5udWNsaWRlLWhlYWx0aC5zaG93TWVtb3J5Jyk7XG5cbiAgLy8gSWYgYW55IG1pZ3JhdGlvbnMgd2VyZSBwZXJmb3JtZWQsIGZvcmNpYmx5IGVuYWJsZSB0aGUgJ2luY29tcGF0aWJsZS1wYWNrYWdlcycgcGFja2FnZSBiZWNhdXNlXG4gIC8vIGl0IG1heSBoYXZlIGJlZW4gZGlzYWJsZWQgcHJvZ3JhbW1hdGljYWxseSB2aWEgaW50ZXJuYWwgbWVhbnMuIE9ubHkgZG8gdGhpcyB3aGlsZSBtaWdyYXRpbmcgc29cbiAgLy8gdXNlcnMgY2FuIHJlLWRpc2FibGUgdGhlIHBhY2thZ2Ugbm9ybWFsbHkgYWZ0ZXIgYW4gaW5pdGlhbCBtaWdyYXRpb24uXG4gIGlmIChkaWRNaWdyYXRlKSB7XG4gICAgY29uc3QgZGlzYWJsZWRQYWNrYWdlcyA9IGF0b20uY29uZmlnLmdldCgnY29yZS5kaXNhYmxlZFBhY2thZ2VzJyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzYWJsZWRQYWNrYWdlcykpIHtcbiAgICAgIGNvbnN0IGluY29tcGF0UGtnc0luZGV4ID0gZGlzYWJsZWRQYWNrYWdlcy5pbmRleE9mKCdpbmNvbXBhdGlibGUtcGFja2FnZXMnKTtcbiAgICAgIGlmIChpbmNvbXBhdFBrZ3NJbmRleCA+PSAwKSB7XG4gICAgICAgIGRpc2FibGVkUGFja2FnZXMuc3BsaWNlKGluY29tcGF0UGtnc0luZGV4LCAxKTtcbiAgICAgICAgYXRvbS5jb25maWcuc2V0UmF3VmFsdWUoJ2NvcmUuZGlzYWJsZWRQYWNrYWdlcycsIGRpc2FibGVkUGFja2FnZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWlncmF0ZUNvbmZpZyxcbn07XG4iXX0=