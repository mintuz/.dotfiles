/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

export type FileWithStats = {
  file: string;
  stats: ?fs.Stats;
  isSymbolicLink: boolean;
};

export function exists(path: string): Promise<boolean> {}

export function findNearestFile(fileName: string, pathToDirectory: string): Promise<?string> {}

/**
 * The lstat endpoint is the same as the stat endpoint except it will return
 * the stat of a link instead of the file the link points to.
 */
export function lstat(path: string): Promise<fs.Stats> {}

/**
 * Creates a new directory with the given path.
 * Throws EEXIST error if the directory already exists.
 * Throws ENOENT if the path given is nested in a non-existing directory.
 */
export function mkdir(path: string): Promise<void> {}

/**
 * Runs the equivalent of `mkdir -p` with the given path.
 *
 * Like most implementations of mkdirp, if it fails, it is possible that
 * directories were created for some prefix of the given path.
 * @return true if the path was created; false if it already existed.
 */
export function mkdirp(path: string): Promise<boolean> {}

/**
 * If no file (or directory) at the specified path exists, creates the parent
 * directories (if necessary) and then writes an empty file at the specified
 * path.
 *
 * @return A boolean indicating whether the file was created.
 */
export function newFile(filePath: string): Promise<boolean> {}

/**
 * The readdir endpoint accepts the following query parameters:
 *
 *   path: path to the folder to list entries inside.
 */
export async function readdir(path: string): Promise<Array<FileWithStats>> {}

/**
 * Gets the real path of a file path.
 * It could be different than the given path if the file is a symlink
 * or exists in a symlinked directory.
 */
export function realpath(path: string): Promise<string> {}

/**
 * Gets the real path of a file path, while expanding telda paths
 * like: ~/abc to its absolute path format.
 */
export function resolveRealPath(path: string): Promise<string> {}

/**
 * Runs the equivalent of `mv sourcePath destinationPath`.
 */
export function rename(sourcePath: string, destinationPath: string): Promise<void> {}

/**
 * Runs the equivalent of `cp sourcePath destinationPath`.
 */
export async function copy(sourcePath: string, destinationPath: string): Promise<boolean> {}

/**
 * Removes directories even if they are non-empty. Does not fail if the directory doesn't exist.
 */
export function rmdir(path: string): Promise<void> {}

/**
 * The stat endpoint accepts the following query parameters:
 *
 *   path: path to the file to read
 */
export function stat(path: string): Promise<fs.Stats> {}

/**
 * Removes files. Does not fail if the file doesn't exist.
 */
export function unlink(path: string): Promise<void> {}

/**
 *   path: the path to the file to read
 *   options: options to pass to fs.readFile.
 *      Note that options does NOT include 'encoding' this ensures that the return value
 *      is always a Buffer and never a string.
 *
 *   Callers who want a string should call buffer.toString('utf8').
 */
export function readFile(path: string, options: ?{encoding?: string; flag?:string}):
    Promise<Buffer> {}

/**
 * The writeFile endpoint accepts the following query parameters:
 *
 *   path: path to the file to read.
 *   options: options to pass to fs.writeFile
 */
export function writeFile(path: string, data: string,
    options: ?{encoding?: string; mode?: number; flag?:string}): Promise<void> {}
