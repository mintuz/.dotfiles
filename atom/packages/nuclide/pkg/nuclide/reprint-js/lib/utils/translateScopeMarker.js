

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var markers = require('../constants/markers');

/**
 * This translates a scope marker into the appropriate marker based on if the
 * scope was broken or not.
 */
function translateScopeMarker(marker, broken) {
  if (broken) {
    if (marker === markers.openScope) {
      return markers.empty;
    } else if (marker === markers.scopeIndent) {
      return markers.indent;
    } else if (marker === markers.scopeBreak) {
      return markers.hardBreak;
    } else if (marker === markers.scopeSpaceBreak) {
      return markers.hardBreak;
    } else if (marker === markers.scopeComma) {
      return markers.comma;
    } else if (marker === markers.scopeDedent) {
      return markers.dedent;
    } else if (marker === markers.closeScope) {
      return markers.empty;
    }
  } else {
    if (marker === markers.openScope) {
      return markers.empty;
    } else if (marker === markers.scopeIndent) {
      return markers.empty;
    } else if (marker === markers.scopeBreak) {
      return markers.empty;
    } else if (marker === markers.scopeSpaceBreak) {
      return markers.space;
    } else if (marker === markers.scopeComma) {
      return markers.empty;
    } else if (marker === markers.scopeDedent) {
      return markers.empty;
    } else if (marker === markers.closeScope) {
      return markers.empty;
    }
  }

  // Fallback to itself.
  return marker;
}

module.exports = translateScopeMarker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0ZVNjb3BlTWFya2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFXQSxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7Ozs7O0FBTWhELFNBQVMsb0JBQW9CLENBQUMsTUFBYyxFQUFFLE1BQWUsRUFBVTtBQUNyRSxNQUFJLE1BQU0sRUFBRTtBQUNWLFFBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDaEMsYUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3RCLE1BQU0sSUFBSSxNQUFNLEtBQUssT0FBTyxDQUFDLFdBQVcsRUFBRTtBQUN6QyxhQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUM7S0FDdkIsTUFBTSxJQUFJLE1BQU0sS0FBSyxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3hDLGFBQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQztLQUMxQixNQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxlQUFlLEVBQUU7QUFDN0MsYUFBTyxPQUFPLENBQUMsU0FBUyxDQUFDO0tBQzFCLE1BQU0sSUFBSSxNQUFNLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRTtBQUN4QyxhQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7S0FDdEIsTUFBTSxJQUFJLE1BQU0sS0FBSyxPQUFPLENBQUMsV0FBVyxFQUFFO0FBQ3pDLGFBQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQztLQUN2QixNQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxVQUFVLEVBQUU7QUFDeEMsYUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3RCO0dBQ0YsTUFBTTtBQUNMLFFBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDaEMsYUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3RCLE1BQU0sSUFBSSxNQUFNLEtBQUssT0FBTyxDQUFDLFdBQVcsRUFBRTtBQUN6QyxhQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7S0FDdEIsTUFBTSxJQUFJLE1BQU0sS0FBSyxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3hDLGFBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztLQUN0QixNQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxlQUFlLEVBQUU7QUFDN0MsYUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3RCLE1BQU0sSUFBSSxNQUFNLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRTtBQUN4QyxhQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7S0FDdEIsTUFBTSxJQUFJLE1BQU0sS0FBSyxPQUFPLENBQUMsV0FBVyxFQUFFO0FBQ3pDLGFBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztLQUN0QixNQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxVQUFVLEVBQUU7QUFDeEMsYUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3RCO0dBQ0Y7OztBQUdELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyIsImZpbGUiOiJ0cmFuc2xhdGVTY29wZU1hcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IG1hcmtlcnMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMvbWFya2VycycpO1xuXG4vKipcbiAqIFRoaXMgdHJhbnNsYXRlcyBhIHNjb3BlIG1hcmtlciBpbnRvIHRoZSBhcHByb3ByaWF0ZSBtYXJrZXIgYmFzZWQgb24gaWYgdGhlXG4gKiBzY29wZSB3YXMgYnJva2VuIG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gdHJhbnNsYXRlU2NvcGVNYXJrZXIobWFya2VyOiBzdHJpbmcsIGJyb2tlbjogYm9vbGVhbik6IHN0cmluZyB7XG4gIGlmIChicm9rZW4pIHtcbiAgICBpZiAobWFya2VyID09PSBtYXJrZXJzLm9wZW5TY29wZSkge1xuICAgICAgcmV0dXJuIG1hcmtlcnMuZW1wdHk7XG4gICAgfSBlbHNlIGlmIChtYXJrZXIgPT09IG1hcmtlcnMuc2NvcGVJbmRlbnQpIHtcbiAgICAgIHJldHVybiBtYXJrZXJzLmluZGVudDtcbiAgICB9IGVsc2UgaWYgKG1hcmtlciA9PT0gbWFya2Vycy5zY29wZUJyZWFrKSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5oYXJkQnJlYWs7XG4gICAgfSBlbHNlIGlmIChtYXJrZXIgPT09IG1hcmtlcnMuc2NvcGVTcGFjZUJyZWFrKSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5oYXJkQnJlYWs7XG4gICAgfSBlbHNlIGlmIChtYXJrZXIgPT09IG1hcmtlcnMuc2NvcGVDb21tYSkge1xuICAgICAgcmV0dXJuIG1hcmtlcnMuY29tbWE7XG4gICAgfSBlbHNlIGlmIChtYXJrZXIgPT09IG1hcmtlcnMuc2NvcGVEZWRlbnQpIHtcbiAgICAgIHJldHVybiBtYXJrZXJzLmRlZGVudDtcbiAgICB9IGVsc2UgaWYgKG1hcmtlciA9PT0gbWFya2Vycy5jbG9zZVNjb3BlKSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5lbXB0eTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG1hcmtlciA9PT0gbWFya2Vycy5vcGVuU2NvcGUpIHtcbiAgICAgIHJldHVybiBtYXJrZXJzLmVtcHR5O1xuICAgIH0gZWxzZSBpZiAobWFya2VyID09PSBtYXJrZXJzLnNjb3BlSW5kZW50KSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5lbXB0eTtcbiAgICB9IGVsc2UgaWYgKG1hcmtlciA9PT0gbWFya2Vycy5zY29wZUJyZWFrKSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5lbXB0eTtcbiAgICB9IGVsc2UgaWYgKG1hcmtlciA9PT0gbWFya2Vycy5zY29wZVNwYWNlQnJlYWspIHtcbiAgICAgIHJldHVybiBtYXJrZXJzLnNwYWNlO1xuICAgIH0gZWxzZSBpZiAobWFya2VyID09PSBtYXJrZXJzLnNjb3BlQ29tbWEpIHtcbiAgICAgIHJldHVybiBtYXJrZXJzLmVtcHR5O1xuICAgIH0gZWxzZSBpZiAobWFya2VyID09PSBtYXJrZXJzLnNjb3BlRGVkZW50KSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5lbXB0eTtcbiAgICB9IGVsc2UgaWYgKG1hcmtlciA9PT0gbWFya2Vycy5jbG9zZVNjb3BlKSB7XG4gICAgICByZXR1cm4gbWFya2Vycy5lbXB0eTtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsYmFjayB0byBpdHNlbGYuXG4gIHJldHVybiBtYXJrZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNsYXRlU2NvcGVNYXJrZXI7XG4iXX0=