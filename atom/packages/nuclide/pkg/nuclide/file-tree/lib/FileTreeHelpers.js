function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _atom = require('atom');

var _remoteConnection = require('../../remote-connection');

var _remoteUri = require('../../remote-uri');

var _remoteUri2 = _interopRequireDefault(_remoteUri);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function dirPathToKey(path) {
  return path.replace(/\/+$/, '') + '/';
}

function isDirKey(key) {
  return key.slice(-1) === '/';
}

function keyToName(key) {
  var path = keyToPath(key);
  var index = path.lastIndexOf('/');
  return index === -1 ? path : path.slice(index + 1);
}

function keyToPath(key) {
  return key.replace(/\/+$/, '');
}

function getParentKey(key) {
  var path = keyToPath(key);
  var parsed = _remoteUri2['default'].parse(path);
  parsed.pathname = _path2['default'].join(parsed.pathname, '..');
  var parentPath = _url2['default'].format(parsed);
  return dirPathToKey(parentPath);
}

// The array this resolves to contains the `nodeKey` of each child
function fetchChildren(nodeKey) {
  var directory = getDirectoryByKey(nodeKey);

  return new Promise(function (resolve, reject) {
    if (directory == null) {
      reject('Directory "' + nodeKey + '" not found or is inaccessible.');
      return;
    }

    // $FlowIssue https://github.com/facebook/flow/issues/582
    directory.getEntries(function (error, entries) {
      // Resolve to an empty array if the directory deson't exist.
      // TODO: should we reject promise?
      if (error && error.code !== 'ENOENT') {
        reject(error);
        return;
      }
      entries = entries || [];
      var keys = entries.map(function (entry) {
        var path = entry.getPath();
        return entry.isDirectory() ? dirPathToKey(path) : path;
      });
      resolve(keys);
    });
  });
}

// TODO: cache these instantiated directories (also expose a way to purge)
function getDirectoryByKey(key) {
  var path = keyToPath(key);
  if (_remoteUri2['default'].isRemote(path)) {
    var connection = _remoteConnection.RemoteConnection.getForUri(path);
    if (!connection) {
      return;
    }
    return new _remoteConnection.RemoteDirectory(connection, path);
  } else {
    return new _atom.Directory(path);
  }
}

// TODO: cache these instantiated entries (also expose a way to purge)
function getFileByKey(key) {
  var path = keyToPath(key);
  if (_remoteUri2['default'].isRemote(path)) {
    var connection = _remoteConnection.RemoteConnection.getForUri(path);
    if (!connection) {
      return;
    }

    return isDirKey(key) ? new _remoteConnection.RemoteDirectory(connection, path) : new _remoteConnection.RemoteFile(connection, path);
  } else {
    return isDirKey(key) ? new _atom.Directory(path) : new _atom.File(path);
  }
}

// Sometimes remote directories are instantiated as local directories but with invalid paths.
function isValidDirectory(directory) {
  return !isLocalFile(directory) || isFullyQualifiedLocalPath(directory.getPath());
}

function isLocalFile(entry) {
  // TODO: implement `RemoteDirectory.isRemoteDirectory()`
  return !('getLocalPath' in entry);
}

function isFullyQualifiedLocalPath(path) {
  return path.charAt(0) === '/';
}

function isContextClick(event) {
  return event.button === 2 || event.button === 0 && event.ctrlKey === true && process.platform === 'darwin';
}

module.exports = {
  dirPathToKey: dirPathToKey,
  isDirKey: isDirKey,
  keyToName: keyToName,
  keyToPath: keyToPath,
  getParentKey: getParentKey,
  fetchChildren: fetchChildren,
  getDirectoryByKey: getDirectoryByKey,
  getFileByKey: getFileByKey,
  isValidDirectory: isValidDirectory,
  isLocalFile: isLocalFile,
  isFullyQualifiedLocalPath: isFullyQualifiedLocalPath,
  isContextClick: isContextClick
};
//# sourceMappingURL=data:application/json;base64,