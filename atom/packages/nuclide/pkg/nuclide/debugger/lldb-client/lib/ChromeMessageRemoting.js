function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var url = require('url');
var remoteUri = require('../../../remote-uri');
var log = _utils2['default'].log;

function translateMessageFromServer(hostname, port, message) {
  return translateMessage(message, function (uri) {
    return translateUriFromServer(hostname, port, uri);
  });
}

function translateMessageToServer(message) {
  return translateMessage(message, translateUriToServer);
}

function translateMessage(message, translateUri) {
  var obj = JSON.parse(message);
  var result = undefined;
  switch (obj.method) {
    case 'Debugger.scriptParsed':
      result = translateField(obj, 'params.url', translateUri);
      break;
    case 'Debugger.setBreakpointByUrl':
      result = translateField(obj, 'params.url', translateUri);
      break;
    case 'Debugger.getScriptSource':
      result = translateField(obj, 'params.scriptId', translateUri);
      break;
    default:
      result = obj;
      break;
  }
  return JSON.stringify(result);
}

function translateField(obj, field, translateUri) {
  var fields = field.split('.');
  var fieldName = fields[0];
  if (fields.length === 1) {
    obj[fieldName] = translateUri(obj[fieldName]);
  } else {
    obj[fieldName] = translateField(obj[fieldName], fields.slice(1).join('.'), translateUri);
  }
  return obj;
}

function translateUriFromServer(hostname, port, uri) {
  var components = remoteUri.parse(uri);
  if (components.protocol === 'file:') {
    var result = remoteUri.createRemoteUri(hostname, port, components.pathname);
    log('Translated URI from ' + uri + ' to ' + result);
    return result;
  } else {
    return uri;
  }
}

function translateUriToServer(uri) {
  if (remoteUri.isRemote(uri)) {
    var result = url.format({
      protocol: 'file',
      slashes: true,
      pathname: remoteUri.getPath(uri)
    });
    log('Translated URI from ' + uri + ' to ' + result);
    return result;
  } else {
    return uri;
  }
}

module.exports = {
  translateMessageFromServer: translateMessageFromServer,
  translateMessageToServer: translateMessageToServer
};
//# sourceMappingURL=data:application/json;base64,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RCxTQUFTLG9CQUFvQixDQUFDLEdBQVcsRUFBVTtBQUNqRCxNQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDM0IsUUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUN4QixjQUFRLEVBQUUsTUFBTTtBQUNoQixhQUFPLEVBQUUsSUFBSTtBQUNiLGNBQVEsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztLQUNqQyxDQUFDLENBQUM7QUFDSCxPQUFHLDBCQUF3QixHQUFHLFlBQU8sTUFBTSxDQUFHLENBQUM7QUFDL0MsV0FBTyxNQUFNLENBQUM7R0FDZixNQUFNO0FBQ0wsV0FBTyxHQUFHLENBQUM7R0FDWjtDQUNGOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZiw0QkFBMEIsRUFBMUIsMEJBQTBCO0FBQzFCLDBCQUF3QixFQUF4Qix3QkFBd0I7Q0FDekIsQ0FBQyIsImZpbGUiOiJDaHJvbWVNZXNzYWdlUmVtb3RpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuY29uc3QgcmVtb3RlVXJpID0gcmVxdWlyZSgnLi4vLi4vLi4vcmVtb3RlLXVyaScpO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL3V0aWxzJztcblxuY29uc3Qge2xvZ30gPSBsb2dnZXI7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZU1lc3NhZ2VGcm9tU2VydmVyKGhvc3RuYW1lOiBzdHJpbmcsIHBvcnQ6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRyYW5zbGF0ZU1lc3NhZ2UobWVzc2FnZSwgdXJpID0+IHRyYW5zbGF0ZVVyaUZyb21TZXJ2ZXIoaG9zdG5hbWUsIHBvcnQsIHVyaSkpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVNZXNzYWdlVG9TZXJ2ZXIobWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRyYW5zbGF0ZU1lc3NhZ2UobWVzc2FnZSwgdHJhbnNsYXRlVXJpVG9TZXJ2ZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdHJhbnNsYXRlVXJpOiAodXJpOiBzdHJpbmcpID0+IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UobWVzc2FnZSk7XG4gIGxldCByZXN1bHQ7XG4gIHN3aXRjaCAob2JqLm1ldGhvZCkge1xuICAgIGNhc2UgJ0RlYnVnZ2VyLnNjcmlwdFBhcnNlZCc6XG4gICAgICByZXN1bHQgPSB0cmFuc2xhdGVGaWVsZChvYmosICdwYXJhbXMudXJsJywgdHJhbnNsYXRlVXJpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RlYnVnZ2VyLnNldEJyZWFrcG9pbnRCeVVybCc6XG4gICAgICByZXN1bHQgPSB0cmFuc2xhdGVGaWVsZChvYmosICdwYXJhbXMudXJsJywgdHJhbnNsYXRlVXJpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RlYnVnZ2VyLmdldFNjcmlwdFNvdXJjZSc6XG4gICAgICByZXN1bHQgPSB0cmFuc2xhdGVGaWVsZChvYmosICdwYXJhbXMuc2NyaXB0SWQnLCB0cmFuc2xhdGVVcmkpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlc3VsdCA9IG9iajtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVGaWVsZChvYmo6IE9iamVjdCwgZmllbGQ6IHN0cmluZywgdHJhbnNsYXRlVXJpOiAodXJpOiBzdHJpbmcpID0+IHN0cmluZyk6IG1peGVkIHtcbiAgY29uc3QgZmllbGRzID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgY29uc3QgZmllbGROYW1lID0gZmllbGRzWzBdO1xuICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMSkge1xuICAgIG9ialtmaWVsZE5hbWVdID0gdHJhbnNsYXRlVXJpKG9ialtmaWVsZE5hbWVdKTtcbiAgfSBlbHNlIHtcbiAgICBvYmpbZmllbGROYW1lXSA9IHRyYW5zbGF0ZUZpZWxkKG9ialtmaWVsZE5hbWVdLCBmaWVsZHMuc2xpY2UoMSkuam9pbignLicpLCB0cmFuc2xhdGVVcmkpO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVVyaUZyb21TZXJ2ZXIoaG9zdG5hbWU6IHN0cmluZywgcG9ydDogbnVtYmVyLCB1cmk6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSByZW1vdGVVcmkucGFyc2UodXJpKTtcbiAgaWYgKGNvbXBvbmVudHMucHJvdG9jb2wgPT09ICdmaWxlOicpIHtcbiAgICBjb25zdCByZXN1bHQgPSByZW1vdGVVcmkuY3JlYXRlUmVtb3RlVXJpKGhvc3RuYW1lLCBwb3J0LCBjb21wb25lbnRzLnBhdGhuYW1lKTtcbiAgICBsb2coYFRyYW5zbGF0ZWQgVVJJIGZyb20gJHt1cml9IHRvICR7cmVzdWx0fWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVVcmlUb1NlcnZlcih1cmk6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChyZW1vdGVVcmkuaXNSZW1vdGUodXJpKSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHVybC5mb3JtYXQoe1xuICAgICAgcHJvdG9jb2w6ICdmaWxlJyxcbiAgICAgIHNsYXNoZXM6IHRydWUsXG4gICAgICBwYXRobmFtZTogcmVtb3RlVXJpLmdldFBhdGgodXJpKSxcbiAgICB9KTtcbiAgICBsb2coYFRyYW5zbGF0ZWQgVVJJIGZyb20gJHt1cml9IHRvICR7cmVzdWx0fWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdHJhbnNsYXRlTWVzc2FnZUZyb21TZXJ2ZXIsXG4gIHRyYW5zbGF0ZU1lc3NhZ2VUb1NlcnZlcixcbn07XG4iXX0=