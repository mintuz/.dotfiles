function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _atom = require('atom');

var _commons = require('../../commons');

var _constants = require('./constants');

var busySignalProvider = null;
var diagnosticProvider = null;
var subscriptions = null;

function getBusySignalProvider() {
  if (!busySignalProvider) {
    var _require = require('../../busy-signal-provider-base');

    var BusySignalProviderBase = _require.BusySignalProviderBase;

    busySignalProvider = new BusySignalProviderBase();
  }
  return busySignalProvider;
}

function getDiagnosticsProvider() {
  if (!diagnosticProvider) {
    var provider = require('./ClangDiagnosticsProvider');
    diagnosticProvider = new provider(getBusySignalProvider());
  }
  return diagnosticProvider;
}

module.exports = {
  activate: function activate() {
    var _require2 = require('../../atom-helpers');

    var projects = _require2.projects;

    subscriptions = new _atom.CompositeDisposable();
    // Provide a 'Clean and rebuild' command to restart the Clang server for the current file
    // and reset all compilation flags. Useful when BUCK targets or headers change,
    // since those are heavily cached for performance. Also great for testing!
    subscriptions.add(atom.commands.add('atom-workspace', 'nuclide-clang:clean-and-rebuild', _asyncToGenerator(function* () {
      var editor = atom.workspace.getActiveTextEditor();
      if (editor == null) {
        return;
      }
      var path = editor.getPath();
      if (path == null) {
        return;
      }

      var _require3 = require('./libclang');

      var reset = _require3.reset;

      yield reset(editor);
      if (diagnosticProvider != null) {
        diagnosticProvider.invalidatePath(path);
        diagnosticProvider.runDiagnostics(editor);
      }
    })));
    // Invalidate all diagnostics when closing the project.
    subscriptions.add(projects.onDidRemoveProjectPath(function (projectPath) {
      if (diagnosticProvider != null) {
        diagnosticProvider.invalidateProjectPath(projectPath);
      }
    }));
  },

  /** Provider for autocomplete service. */
  createAutocompleteProvider: function createAutocompleteProvider() {
    var _require4 = require('./AutocompleteProvider');

    var AutocompleteProvider = _require4.AutocompleteProvider;

    var autocompleteProvider = new AutocompleteProvider();
    var getSuggestions = autocompleteProvider.getAutocompleteSuggestions.bind(autocompleteProvider);

    return {
      selector: '.source.objc, .source.objcpp, .source.cpp, .source.c',
      inclusionPriority: 1,
      suggestionPriority: 5, // Higher than the snippets provider.
      getSuggestions: getSuggestions
    };
  },

  createTypeHintProvider: function createTypeHintProvider() {
    var _require5 = require('./TypeHintProvider');

    var TypeHintProvider = _require5.TypeHintProvider;

    var typeHintProvider = new TypeHintProvider();
    var typeHint = typeHintProvider.typeHint.bind(typeHintProvider);

    return {
      inclusionPriority: 1,
      providerName: _constants.PACKAGE_NAME,
      selector: _commons.array.from(_constants.GRAMMAR_SET).join(', '),
      typeHint: typeHint
    };
  },

  getHyperclickProvider: function getHyperclickProvider() {
    return require('./HyperclickProvider');
  },

  provideBusySignal: function provideBusySignal() {
    return getBusySignalProvider();
  },

  provideDiagnostics: function provideDiagnostics() {
    return getDiagnosticsProvider();
  },

  deactivate: function deactivate() {
    if (diagnosticProvider != null) {
      diagnosticProvider.dispose();
      diagnosticProvider = null;
    }
    if (subscriptions != null) {
      subscriptions.dispose();
      subscriptions = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,